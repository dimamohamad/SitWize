@model MasterPiece.Models.Booking

@{
    ViewBag.Title = "Create Booking";
    Layout = "~/Views/Shared/_Admin.cshtml";
}

<div class="main-container">
    <div class="pd-ltr-20">
        <br />
        <h1>Create Booking</h1>
        <br />

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="booking-create">
        <div>
            <strong>@Html.LabelFor(model => model.UserID):</strong>
            @Html.DropDownList("UserID", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.UserID, "", new { @class = "text-danger" })
        </div>

        <div>
            <strong>@Html.LabelFor(model => model.SitterID):</strong>
            @Html.DropDownList("SitterID", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.SitterID, "", new { @class = "text-danger" })
        </div>

        <div>
            <strong>@Html.LabelFor(model => model.ServiceID):</strong>
            @Html.DropDownList("ServiceID", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ServiceID, "", new { @class = "text-danger" })
        </div>

        <div>
            <strong>@Html.LabelFor(model => model.BookingDate):</strong>
            @Html.EditorFor(model => model.BookingDate, new { htmlAttributes = new { @class = "form-control", type = "date" } })
            @Html.ValidationMessageFor(model => model.BookingDate, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            @Html.Label("Start Date", htmlAttributes: new { @class = "form-label" })
            @Html.TextBox("StartDate", null, new { @class = "form-control", type = "date", id = "startDate" })
        </div>
        <div class="mb-3">
            @Html.Label("Start Time", htmlAttributes: new { @class = "form-label" })
            @Html.TextBox("StartTime", null, new { @class = "form-control", type = "time", id = "startTime", onchange = "calculateDuration()" })
        </div>

        <div class="mb-3">
            @Html.Label("End Time", htmlAttributes: new { @class = "form-label" })
            @Html.TextBox("EndTime", null, new { @class = "form-control", type = "time", id = "endTime", onchange = "calculateDuration()" })
        </div>

        <!-- Duration -->
        <div class="mb-3">
            @Html.Label("Duration", htmlAttributes: new { @class = "form-label" })
            @Html.TextBox("Duration", null, new { @class = "form-control", @readonly = "readonly", id = "duration" })
        </div>
        <div>
            <strong>@Html.LabelFor(model => model.TotalAmount):</strong>
            @Html.EditorFor(model => model.TotalAmount, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.TotalAmount, "", new { @class = "text-danger" })
        </div>
    </div>

            <br />
            <div>
                <input type="submit" value="Create" class="btn btn-primary" />
                <a href="@Url.Action("GetBookings", "Admin")" class="btn btn-secondary">Back to List</a>
            </div>
        }
    </div>
</div>

<style>
    .booking-create div {
        margin: 10px 0;
    }

    .booking-create strong {
        width: 150px;
        display: inline-block;
    }

    .form-control {
        display: inline-block;
        width: calc(100% - 160px);
    }

    .text-danger {
        display: block;
        margin-left: 150px;
    }
</style>

<script>
    function calculateDuration() {
        const startTime = document.getElementById('startTime').value;
        const endTime = document.getElementById('endTime').value;
        const durationField = document.getElementById('duration');

        if (startTime && endTime) {
            const start = new Date('1970-01-01T' + startTime + 'Z');
            const end = new Date('1970-01-01T' + endTime + 'Z');
            let duration = (end - start) / 1000 / 60; // duration in minutes

            if (duration < 0) {
                duration += 24 * 60; // adjust for times that cross midnight
            }

            const hours = Math.floor(duration / 60);
            const minutes = duration % 60;

            durationField.value = `${hours} hour(s) ${minutes} minute(s)`;
        } else {
            durationField.value = '';
        }
    }
</script>
